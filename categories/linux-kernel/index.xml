<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux Kernel on Yuanye Ma&#39;s Blog</title>
    <link>http://0.0.0.0:1313/categories/linux-kernel/</link>
    <description>Recent content in Linux Kernel on Yuanye Ma&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>yuanye.ma@qq.com (Yuanye Ma)</managingEditor>
    <webMaster>yuanye.ma@qq.com (Yuanye Ma)</webMaster>
    <lastBuildDate>Mon, 15 Apr 2019 16:01:23 +0800</lastBuildDate>
    <atom:link href="http://0.0.0.0:1313/categories/linux-kernel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>I2C子系统代码跟读</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/2020-10-05-linux-i2c%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E8%B7%9F%E8%AF%BB/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/2020-10-05-linux-i2c%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E8%B7%9F%E8%AF%BB/</guid>
      <description>Linux内核 I2C子系统代码跟读 听了这个课程感觉讲的很好，很有必要自己跟读一遍Kernel中I2C的代码，以加深对Kernel中I2C子系</description>
    </item>
    <item>
      <title>input子系统</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/input%E5%AD%90%E7%B3%BB%E7%BB%9F/input%E5%AD%90%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/input%E5%AD%90%E7%B3%BB%E7%BB%9F/input%E5%AD%90%E7%B3%BB%E7%BB%9F/</guid>
      <description>[toc] input子系统特性、用途 1， input子系统是用来解决输入问题的，所谓输入，即驱动为应用层提供数据。 2， 使用字符设备的read或者ioc</description>
    </item>
    <item>
      <title>Kobject和sysfs</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/kobjectsysfs/kobject%E5%92%8Csysfs/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/kobjectsysfs/kobject%E5%92%8Csysfs/</guid>
      <description>Kobject和sysfs kobject、ktype、kset 以及其相互关系 kobject /* include/linux/kobject.h */ struct kobject { const char *name; struct list_head entry; struct kobject *parent; // 指向kobject的父对象，这</description>
    </item>
    <item>
      <title>kzalloc &amp; kmalloc</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/kzalloc--kmalloc/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/kzalloc--kmalloc/</guid>
      <description>kzalloc &amp;amp; kmalloc /* include/linux/slab.h */ /** * kzalloc - allocate memory. The memory is set to zero. * @size: how many bytes of memory are required. * @flags: the type of memory to allocate (see kmalloc). */ static inline void *kzalloc(size_t size, gfp_t flags) { return kmalloc(size, flags | __GFP_ZERO); } /* 调用了 kmalloc此函数在inc</description>
    </item>
    <item>
      <title>LED驱动</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/linux%E9%A9%B1%E5%8A%A8%E4%B9%8Bled%E9%A9%B1%E5%8A%A8/2020-10-11-linux%E9%A9%B1%E5%8A%A8%E4%B9%8Bled%E9%A9%B1%E5%8A%A8/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/linux%E9%A9%B1%E5%8A%A8%E4%B9%8Bled%E9%A9%B1%E5%8A%A8/2020-10-11-linux%E9%A9%B1%E5%8A%A8%E4%B9%8Bled%E9%A9%B1%E5%8A%A8/</guid>
      <description>linux驱动之LED驱动 试验平台： NanoPi M1 全志H3 寄存器地址在全志H3的Datasheet 4.23节有介绍。 ![电路图]H3-PL11DAT.</description>
    </item>
    <item>
      <title>Linux Kernel Makefiles</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/linux-kernel-makefiles/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/linux-kernel-makefiles/</guid>
      <description>====================== Linux Kernel Makefiles 这个文档介绍了Linux kernel Makefiles。 .. 目录 === 1 Overview === 2 Who does what === 3 The kbuild files --- 3.1 目标定义(Goal definitions) --- 3.2 要编译进内核的目标(Bui</description>
    </item>
    <item>
      <title>linux kernel slab系统</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/linux-kernel-slab%E7%B3%BB%E7%BB%9F/linux-kernel-slab%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/linux-kernel-slab%E7%B3%BB%E7%BB%9F/linux-kernel-slab%E7%B3%BB%E7%BB%9F/</guid>
      <description>linux kernel slab系统 基于linux kernel v2.6.30.4 基本原理 ​ 以字节为单位的内存管理 ​ SLAB 为了提高内核中一些十分频繁进行分配释放的“对象”的分配效率， SLAB 的做法是</description>
    </item>
    <item>
      <title>Linux 内核临时页表初始化</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/linux-%E5%86%85%E6%A0%B8%E4%B8%B4%E6%97%B6%E9%A1%B5%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/linux-%E5%86%85%E6%A0%B8%E4%B8%B4%E6%97%B6%E9%A1%B5%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>Linux 内核临时页表初始化 基于 linux 2.6.30.4分析x86平台相关代码 **64位系统：**使用四级分页或三级分页，跟硬件有关。 **未开启PAE(物</description>
    </item>
    <item>
      <title>Linux 内核内存管理</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/linux-kernel%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/linux-%E5%86%85%E6%A0%B8%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/linux-kernel%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/linux-%E5%86%85%E6%A0%B8%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</guid>
      <description>0xFFtypora-copy-images-to: ./ Linux 内核内存管理 [toc] 越整理发现知识越多，分页机制、伙伴算法、slab等任何一块单独拿出来都有很多东西，因此本文先粗略的统揽全貌，有时间再针对</description>
    </item>
    <item>
      <title>Linux设备树</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/%E5%85%B3%E4%BA%8E%E8%AE%BE%E5%A4%87%E6%A0%91/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/%E5%85%B3%E4%BA%8E%E8%AE%BE%E5%A4%87%E6%A0%91/</guid>
      <description>Linux驱动之设备树（华清创客学院） Open Firmware Device Tree &amp;ndash; 开发固件设备树 描述包括CPU的数量、类别、内存基地址和大小、总线和桥、外设连接、中断控制器、</description>
    </item>
    <item>
      <title>Linux设备驱动基础</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/2020-10-10-%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/2020-10-10-%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E5%9F%BA%E7%A1%80/</guid>
      <description>1.2 设备驱动基础 驱动基本结构 // hello_drv.c #include &amp;lt;linux/init.h&amp;gt; #include &amp;lt;linux/module.h&amp;gt; static int __init hello_drv_init(void) { printk(KERN_ERR&amp;#34;-----------from hello.ko : %s %s---------\n&amp;#34;, __FILE__, __FUNCTION__); return 0; } static void __exit hello_drv_exit(void) { printk(&amp;#34;-----------from hello.ko : %s %s---------\n&amp;#34;, __FILE__, __FUNCTION__); } module_init(hello_drv_init); module_exit(hello_drv_exit); MODULE_LICENSE(&amp;#34;GPL&amp;#34;); 基本Makefile结构 # 内核源码路径 KERNEL_DIR</description>
    </item>
    <item>
      <title>Linux设备驱动开发--中断用法</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/2020-10-27-linux%E9%A9%B1%E5%8A%A8%E4%B9%8B%E4%B8%AD%E6%96%AD%E6%8C%89%E9%94%AE%E9%A9%B1%E5%8A%A8/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/2020-10-27-linux%E9%A9%B1%E5%8A%A8%E4%B9%8B%E4%B8%AD%E6%96%AD%E6%8C%89%E9%94%AE%E9%A9%B1%E5%8A%A8/</guid>
      <description>Linux设备驱动开发&amp;ndash;中断用法 [TOC] 1. linux中file cdev inode之间的关系； struct file对象 ： 描述进程中打开文件的信息，包括文</description>
    </item>
    <item>
      <title>Linux设备驱动模型</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/linux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B/2020-10-06-linux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/linux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B/2020-10-06-linux%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B/</guid>
      <description>Linux设备驱动模型 本来是看了宋宝华写的《linux设备驱动开发详解（第2版）》的第5章：设备文件系统，关于设备模型的描述做了一些笔记，想</description>
    </item>
    <item>
      <title>loop设备的使用</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/2020-10-09-loop%E8%AE%BE%E5%A4%87%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/2020-10-09-loop%E8%AE%BE%E5%A4%87%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>loop设备的使用 以下引自zh.wikipedia.org /dev/loop（或称vnd (vnode disk)、lofi（循环文件接口））在类Unix</description>
    </item>
    <item>
      <title>platform总线驱动</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/2020-10-06-platform%E6%80%BB%E7%BA%BF%E9%A9%B1%E5%8A%A8/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/2020-10-06-platform%E6%80%BB%E7%BA%BF%E9%A9%B1%E5%8A%A8/</guid>
      <description>Linux内核 platform总线驱动 platform总线驱动 在linux2.6以后的设备驱动模型中，需要关心总线、设备和驱动三个实体，总线</description>
    </item>
    <item>
      <title>vim ctags cscope</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/2020-10-08-vim-ctags-cscope/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/2020-10-08-vim-ctags-cscope/</guid>
      <description>vim ctags cscope ctags or cscope 为什么要同时用ctags和cscope ctags启用了两个功能：允许您从函数调用跳转到其定义，以及omni完成。 ​ 第一个功能意味</description>
    </item>
    <item>
      <title>提交内核patch</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/submit-patch/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/submit-patch/</guid>
      <description>提交kernel patch 创建工作分支 # 添加linux-next远程分支 git remote add linux-next https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git git fetch --tags linux-next # 基于next-20210112标签创建工作分支 git branch mybranch next-20210112 #</description>
    </item>
    <item>
      <title>编译内核文档</title>
      <link>http://0.0.0.0:1313/post/os/linux-kernel/%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%E6%96%87%E6%A1%A3/</link>
      <pubDate>Mon, 15 Apr 2019 16:01:23 +0800</pubDate><author>yuanye.ma@qq.com (Yuanye Ma)</author>
      <guid>http://0.0.0.0:1313/post/os/linux-kernel/%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8%E6%96%87%E6%A1%A3/</guid>
      <description>$ make htmldocs Documentation/Makefile:39: The &amp;#39;sphinx-build&amp;#39; command was not found. Make sure you have Sphinx installed and in PATH, or set the SPHINXBUILD make variable to point to the full path of the &amp;#39;sphinx-build&amp;#39; executable. Detected OS: Ubuntu 20.04.1 LTS. Warning: better to also install &amp;#34;convert&amp;#34;. Warning: better to also install &amp;#34;dot&amp;#34;. Warning: better to also install &amp;#34;dvipng&amp;#34;. ERROR: please install &amp;#34;ensurepip&amp;#34;, otherwise, build won&amp;#39;t work. Warning: better to also</description>
    </item>
  </channel>
</rss>
